" reference file: https://github.com/gmarik/vimfiles/blob/master/vimrc
" reference file: https://github.com/Firef0x/vimfiles/blob/master/vimrc
" reference file: https://github.com/Valloric/dotfiles/blob/master/vim/vimrc.vim

" Scripts and Plugins " {{{
filetype off
runtime macros/matchit.vim
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Plugin 'gmarik/vundle' " let Vundle manage Vundle
Plugin 'FSwitch'
"Plugin 'Raimondi/delimitMate'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'scrooloose/syntastic'
Plugin 'Yggdroot/indentLine'
Plugin 'timcharper/textile.vim'
"Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'gmarik/vim-markdown'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'sjl/gundo.vim'
Plugin 'bogado/file-line'
Plugin 'vim-scripts/lastpos.vim'
Plugin 'junegunn/vim-easy-align'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'bling/vim-airline'
Plugin 'msanders/snipmate.vim'

Plugin 'Valloric/YouCompleteMe'
Plugin 'wincent/Command-T'

Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'

" Colorscheme
Plugin 'tomasr/molokai'
Plugin 'kogyblack/vim-kogy-colorscheme'
"Plugin 'matthewtodd/vim-twilight'
"Plugin 'altercation/vim-colors-solarized.git'
"Plugin 'jnurmine/Zenburn'
"Plugin 'wesgibbs/vim-irblack'

filetype plugin indent on      " Automatically detect file types.

" " }}}


" General "{{{
set nocompatible               " be iMproved

scriptencoding utf-8           " utf-8 all the way
set encoding=utf-8

set history=256                " Number of things to remember in history.
set timeoutlen=250             " Time to wait after ESC (default causes an
                               " annoying delay)
set clipboard+=unnamed         " Yanks go on clipboard instead.
set pastetoggle=<F10>          " toggle between paste and normal: for 'safer'
                               " pasting from keyboard
set shiftround                 " round indent to multiple of 'shiftwidth'
set tags=.git/tags;$HOME       " consider the repo tags first, then
                               " walk directory tree upto $HOME looking for tags
                               " note `;` sets the stop folder. :h file-search

"set modeline
"set modelines=5                " default numbers of lines to read for modeline
                                " instructions

set autowrite                  " Writes on make/shell commands
set autoread

set nobackup
set nowritebackup
set directory=/tmp//           " prepend(^=) $HOME/.tmp/ to default path; use
                               " full path as backup filename(//)
set noswapfile                 " 

set hidden                     " The current buffer can be put to the background
                               " without writing to disk

set hlsearch                   " highlight search
set ignorecase                 " be case insensitive when searching
set smartcase                  " be case sensitive when input has a capital
                               " letter
set incsearch                  " show matches while typing

let mapleader = ' '
let maplocalleader = '	'      " Tab as a local leader

set scrolloff=7

" "}}}

" Formatting "{{{
"set fo+=o                      " Automatically insert the current comment
                                " leader after hitting 'o' or 'O' in Normal mode
"set fo-=r                      " Do not automatically insert a comment leader
                                " after an enter
"set fo-=t                      " Do no auto-wrap text using textwidth
                                "(does not apply to comments)

set formatoptions=tcroqnj

"set nowrap
set whichwrap+=<,>,h,l

set textwidth=80                " Limit number of lines to 80
set colorcolumn=+1
"hi ColorColumn ctermbg=236

set tabstop=2                  " tab size eql 2 spaces
"set softtabstop=2
set shiftwidth=2               " default shift width for indents
set expandtab                  " replace tabs with ${tabstop} spaces
"set smarttab                   "

set noshowmode                 " Don't show mode on bottom

set backspace=indent
set backspace+=eol
set backspace+=start

set autoindent
set cindent
set indentkeys-=0#            " do not break indent on #
set cinkeys-=0#
set cinkeys+=0=break
set cinoptions=:s,cs
set cinoptions+=b1,g0,N-s,t0,(0,W4
set cinwords=if,else,while,do
set cinwords+=for,switch,case
" "}}}

" Visual "{{{

set t_Co=256 " set 256 colors on vim

if &term =~ '256color'
  set t_ut=
endif

colorscheme kogyblack

"let g:molokai_original = 1
"colorscheme molokai           " Colorscheme
"hi Normal ctermbg=none        " Enables transparency on terminal

"syntax on                     " enable syntax

set mouse=a                   " enable mouse in GUI mode
set mousehide                 " Hide mouse after chars typed

"set nonumber                  " line numbers Off
set number

set undofile                  " stores undo state even when files are closed (in
                              " undodir)

set cursorline                " Current line adornment
"hi CursorLine cterm=none ctermbg=232

set lazyredraw                " Don't redraw while executing macros

set magic

set showmatch                 " Show matching brackets.
set matchtime=2               " Bracket blinking.

set wildmode=longest,list     " At command line, complete longest common string,
                              " then list alternatives.
set wildmenu                  " Completition with menu

set completeopt+=preview

set novisualbell              " No blinking
set noerrorbells              " No noise.
set vb t_vb=                  " disable any beeps or flashes on error

set laststatus=2              " always show status line.
set shortmess=atI             " shortens messages
set showcmd                   " display an incomplete command in statusline

"set statusline=%<%f\          " custom statusline
"set stl+=[%{&ff}]             " show fileformat
"set stl+=%y%m%r%=
"set stl+=%-14.(%l,%c%V%)\ %P


set foldenable                " Turn on folding
set foldmethod=marker         " Fold on the marker
set foldlevel=100             " Don't autofold anything (but I can still fold
                              " manually)

set foldopen=block,hor,tag    " what movements open folds
set foldopen+=percent,mark
set foldopen+=quickfix

set virtualedit=block

set splitbelow
set splitright

set list listchars=tab:»\ ,trail:·,precedes:<,extends:>
map <silent> <F12> :set invlist<CR>

" "}}}

" Key mappings " {{{

" Swap ; and :, since : is used way more than ;
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Swap ` and '
nnoremap ' `
nnoremap ` '
vnoremap ' `
vnoremap ` '

"nnoremap <leader>rs :source ~/.vimrc<CR>
nnoremap <leader>rs :source $MYVIMRC<CR>
"nnoremap <leader>rt :tabnew ~/.vim/vimrc<CR>
"nnoremap <leader>re :e ~/.vim/vimrc<CR>
"nnoremap <leader>rd :e ~/.vim/ <CR>
"nnoremap <leader>rc :silent ! cd ~/.vim/ && git commit ~/.vim/vimrc -v <CR>
nnoremap <leader>re :edit $MYVIMRC<CR>

" Tabs
"nnoremap <localleader>h :tabprev<CR>
"nnoremap <localleader>l :tabnext<CR>

" Buffers
nnoremap <localleader>- :bd<CR>
nnoremap <localleader>-- :bd!<CR>

" Split line(opposite to S-J joining line)
"nnoremap <S-k> gEa<CR><ESC>ew
nnoremap <S-k> i<CR><ESC>

" Create line below
nnoremap <S-CR> A<CR><ESC>

" Explorer
"nnoremap <leader>E :Explore<CR>
"nnoremap <leader>EE :Vexplore!<CR><C-W>=

" <Leader>{P,p} to paste copied outside vim
nnoremap <silent> <Leader>P "+P
nnoremap <silent> <Leader>p "+p
vnoremap <silent> <Leader>p "+p
"inoremap <silent> <Leader>p <ESC>"+pa

" <Leader>{Y,y} to copy outside vim
nnoremap <silent> <Leader>y "+y
noremap <silent> <Leader>y "+y
" recursive map, 'cause Y have a mapping
nmap <silent> <Leader>Y "+Y

" Make Control-direction switch between windows (like C-W h, etc)
nnoremap <leader>h <c-w>h
nnoremap <leader>j <c-w>j
nnoremap <leader>k <c-w>k
nnoremap <leader>l <c-w>l

" Splitting window
"nnoremap <leader>v :vnew<CR>
"nnoremap <leader>v <C-W>v<CR>
"nnoremap <leader>s <C-w>s
nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :split<CR>
nnoremap <leader>s :split<CR>

" Remap search to center match
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" Erase highlights
"nnoremap <S-Space> :noh<CR>
"nnoremap <silent> <leader>n :nohlsearch<CR>
nnoremap <silent> <leader><CR> :noh<CR>

" Now we don't have to move our fingers so far when we want to scroll through
" the command history; also, don't forget the q: command (see :h q: for more
" info)
cnoremap <c-j> <down>
cnoremap <c-k> <up>

" Switches to the previous buffer that was shown in the current window, but also
" closes the current buffer before switching to the previous one
noremap <leader>bq <c-^> :bd #<cr>

" For fast scrolling
noremap <c-j> 15gj
noremap <c-k> 15gk

" Switch to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>

" Toggle and untoggle spell checking
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>

" spelling shortcuts using <leader>
" ]s next misspelled word
" [s previous misspelled word
" zg add to dict
" z= get suggestions
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>su z=

" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv

" Move to the beginning and end of the line
nnoremap L $
nnoremap H ^

" Maps 'Y' to yank to the end of the line
nnoremap Y y$

" Adds quick quit
nnoremap <leader>q :q<cr>

" Adds quick quit insert mode
inoremap ,. <esc>
inoremap <esc> <nop>

" " }}}

" AutoCommands " {{{
"au BufRead,BufNewFile {*.go}                                          setl ft=go tabstop=2 softtabstop=2 noexpandtab smarttab
" autocmd FileType go compiler go
au BufRead,BufNewFile {Gemfile,Rakefile,Capfile,*.rake,config.ru}     setl ft=ruby tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab
"au BufRead,BufNewFile {*.local}                                       setl ft=sh
au BufRead,BufNewFile {*.md,*.mkd,*.markdown}                         setl ft=markdown
"au BufRead,BufNewFile {*.scala}                                       setl ft=scala
"au! BufReadPost       {COMMIT_EDITMSG,*/COMMIT_EDITMSG}               setl ft=gitcommit noml list| norm 1G
"au! BufWritePost      {*.snippet,*.snippets}                          call ReloadAllSnippets()

" open help in vertical split
au BufWinEnter *.txt if &ft == 'help' | wincmd H | nmap q :q<CR> | endif

autocmd! BufWritePost .vimrc,_vimrc,vimrc
        \ source $MYVIMRC | AirlineRefresh

" " }}}

" Scripts and Plugins Mappings " {{{

"""""""""""
" FSwitch "
"""""""""""
"nnoremap <leader>s  :FSHere<CR>
nnoremap <leader>sj :FSHere<CR>
nnoremap <leader>sl :FSSplitRight<CR>
nnoremap <leader>sh :FSSplitLeft<CR>

"""""""""""""""""
" YouCompleteMe "
"""""""""""""""""
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tag_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_register_as_syntastic_checker = 0

"""""""""""""
" Syntastic "
"""""""""""""
"let g:syntastic_check_on_open = 1

"set error or warning signs
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

"whether to show balloons
let g:syntastic_enable_balloons = 1
let g:syntastic_auto_loc_list = 1

"let g:syntastic_mode_map = { "mode": "passive" }
hi SpellBad ctermbg=black
hi SpellCap ctermbg=black

" C++ Files
"let g:syntastic_cpp_include_dirs = ['/usr/include/c++/4.8/',
                                    "'/usr/include/wx-3.0/',
                                    "'/usr/include/wx-3.0/wx/']
let g:syntastic_cpp_include_dirs = ['/usr/lib/x86_64-linux-gnu/wx/include/gtk2-unicode-3.0/', '/usr/include/wx-3.0/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++ `wx-config --cppflags` `wx-config --libs`'

" LaTeX Files
let g:syntastic_tex_checkers=['chktex.vim']

"""""""""""""""
" Indent line "
"""""""""""""""
let g:indentLine_color_term = 0

"""""""""""""""""
" Indent guides "
"""""""""""""""""
"let g:indent_guides_auto_colors = 0
"let g:indent_guides_enable_on_vim_startup = 0
"let g:indent_guides_color_change_percent = 7
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=none
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=233

"""""""""""""""""""
" Git integration "
"""""""""""""""""""
"Plugin 'tpope/vim-git'
"Plugin 'tpope/vim-fugitive'
"nnoremap <leader>W :Gwrite<CR>
"nnoremap <leader>C :Gcommit -v<CR>
"nnoremap <leader>S :Gstatus \| 7<CR>
"inoremap <leader>W <Esc><leader>W
"inoremap <leader>C <Esc><leader>C
"inoremap <leader>S <Esc><leader>S

"""""""""
" Gundo "
"""""""""
nnoremap <silent> <F5> :GundoToggle<CR>
let g:gundo_close_on_revert=1
"let g:gundo_width=80

""""""""""""""
" Easy Align "
""""""""""""""
vmap <Enter>          <Plug>(EasyAlign)
vmap <Leader><Enter>  <Plug>(LiveEasyAlign)

"""""""""""""""
" Easy Motion "
"""""""""""""""
let g:EasyMotion_leader_key='<LocalLeader>'
nmap <LocalLeader>h <Plug>(easymotion-linebackward)
nmap <LocalLeader>j <Plug>(easymotion-j)
nmap <LocalLeader>k <Plug>(easymotion-k)
nmap <LocalLeader>l <Plug>(easymotion-lineforward)

"""""""""""
" Airline "
"""""""""""
let g:airline_powerline_fonts = 1
"let g:airline_theme='tomorrow'

"let g:airline_section_a = airline#section#create(['%<', 'file', 'readonly'])
"let g:airline_section_b = '' " airline#section#create_left(['mode', 'paste', 'iminsert'])
"let g:airline_section_c = '' " airline#section#create(['hunks'])
"let g:airline_section_gutter = airline#section#create(['%=%y%m%r[%{&ff}]'])
"let g:airline_section_x = '' " airline#section#create_right(['filetype'])
"" let g:airline_section_y = '%y%m%r%=[%{&ff}]' "airline#section#create_right(['ffenc'])
"let g:airline_section_z = airline#section#create(['%(%l,%c%V%) %P'])
"let g:airline_section_warning = '' "airline#section#create(['whitespace'])


"""""""""""
" Session "
"""""""""""
" you also need to run :SaveSession once to create the default.vim session that
" will then be autoloaded/saved from then on

let g:session_autoload        = 'yes'
let g:session_autosave        = 'yes'
let g:session_default_to_last = 'yes'
let g:session_directory       = '~/tmp/vim/sessions'


" Programming
"Plugin 'Blackrush/vim-gocode'
"Plugin 'fatih/vim-go'
"Plugin 'derekwyatt/vim-scala'
"Plugin 'tpope/vim-rails'
" Dash.app
"Plugin 'rizzatti/funcoo.vim'
"Plugin 'rizzatti/dash.vim'
" Syntax highlight
"Plugin 'tpope/vim-unimpaired'

" FuzzyFinder
"Plugin 'L9'
"Plugin 'FuzzyFinder'
"" FuF customisations "{{{
"let g:fuf_modesDisable = []
"nnoremap <leader>h :FufHelp<CR>
"nnoremap <leader>1  :FufTagWithCursorWord<CR>
"nnoremap <leader>11 :FufTag<CR>
"nnoremap <leader>2  :FufFileWithCurrentBufferDir<CR>
"nnoremap <leader>22 :FufFile<CR>
"nnoremap <leader>3  :FufBuffer<CR>
"nnoremap <leader>4  :FufDirWithCurrentBufferDir<CR>
"nnoremap <leader>44 :FufDir<CR>
"nnoremap <leader>5  :FufBufferTag<CR>
"nnoremap <leader>55 :FufBufferTagAll<CR>
"nnoremap <leader>6  :FufMruFile<CR>
"nnoremap <leader>7  :FufLine<CR>
"nnoremap <leader>8  :FufChangeList<CR>
"nnoremap <leader>9  :FufTaggedFile<CR>
"
"nnoremap <leader>p :FufDir ~/src/<CR>
"nnoremap <leader>ge :FufDir ~/.rvm/gems/<CR>
"
"nnoremap <leader>gn :vnew \| :FufFile ~/src/notes/<CR>

" " }}}


"Plugin 'kien/ctrlp.vim'
"let g:ctrlp_map = '<leader>t'
"let g:ctrlp_max_height = 30
"let g:ctrlp_match_window_bottom=1
"let g:ctrlp_max_height = 20
"let g:ctrlp_match_window_reversed = 1
"let g:ctrlp_switch_buffer = 'e'
"nnoremap <leader>ev :CtrlP app/views<cr>
"nnoremap <leader>ec :CtrlP app/controllers<cr>
"nnoremap <leader>em :CtrlP app/models<cr>
"nnoremap <leader>el :CtrlP lib<cr>
"nnoremap <leader>ea :CtrlP app/assets<cr>
"nnoremap <leader>ep :CtrlP public<cr>
"nnoremap <leader>er :topleft :vsplit config/routes.rb<cr>
"nnoremap <leader>eg :topleft :vsplit Gemfile<cr>

" " }}}
