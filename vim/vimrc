" reference file: https://github.com/gmarik/vimfiles/blob/master/vimrc
" reference file: https://github.com/Firef0x/vimfiles/blob/master/vimrc
" reference file: https://github.com/Valloric/dotfiles/blob/master/vim/vimrc.vim

" Scripts and Plugins " {{{
filetype off
runtime macros/matchit.vim
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Plugin 'gmarik/vundle' " let Vundle manage Vundle
Plugin 'FSwitch'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'scrooloose/syntastic'
Plugin 'Yggdroot/indentLine'
Plugin 'timcharper/textile.vim'
"Plugin 'gmarik/vim-markdown'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-dispatch'
"Plugin 'sjl/gundo.vim'
Plugin 'bogado/file-line'
Plugin 'vim-scripts/lastpos.vim'
Plugin 'junegunn/vim-easy-align'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'bling/vim-airline'
Plugin 'SirVer/ultisnips'
"Plugin 'honza/vim-snippets'

Plugin 'kchmck/vim-coffee-script'

"Plugin 'Valloric/YouCompleteMe'
Plugin 'wincent/Command-T'

"Plugin 'xolox/vim-misc'
"Plugin 'xolox/vim-session'

" Colorscheme
"Plugin 'tomasr/molokai'
Plugin 'kogyblack/vim-kogy-colorscheme'

call vundle#end()
filetype plugin indent on      " Automatically detect file types.

" " }}}


" General "{{{

" Should be the last entry (for UltiSnips)
set rtp+=$HOME/git/dotfiles/vim

set nocompatible               " be iMproved

scriptencoding utf-8           " utf-8 all the way
set encoding=utf-8

set history=256                " Number of things to remember in history.
set timeoutlen=250             " Time to wait after ESC (default causes an
                               " annoying delay)
set clipboard+=unnamed         " Yanks go on clipboard instead.
set pastetoggle=<F10>          " toggle between paste and normal: for 'safer'
                               " pasting from keyboard
set shiftround                 " round indent to multiple of 'shiftwidth'
set tags=.git/tags;$HOME       " consider the repo tags first, then
                               " walk directory tree upto $HOME looking for tags
                               " note `;` sets the stop folder. :h file-search

set modeline
set modelines=5                " default numbers of lines to read for modeline
                               " instructions

set autowrite                  " Writes on make/shell commands
set autoread

set nobackup
set nowritebackup
set directory=/tmp//           " prepend(^=) $HOME/.tmp/ to default path; use
                               " full path as backup filename(//)
set noswapfile                 " 

set hidden                     " The current buffer can be put to the background
                               " without writing to disk

set hlsearch                   " highlight search
set ignorecase                 " be case insensitive when searching
set smartcase                  " be case sensitive when input has a capital
                               " letter
set incsearch                  " show matches while typing

let mapleader = ','
let maplocalleader = '	'      " Tab as a local leader

set scrolloff=10

" "}}}

" Formatting "{{{

"set formatoptions=tcrqnj  " Need testing!!!

set formatoptions=cqnj
"set nowrap
set whichwrap+=<,>,h,l

set wrap
"set textwidth=80                " Limit number of lines to 80
"set colorcolumn=+1
"hi ColorColumn ctermbg=236

set tabstop=2                  " tab size eql 2 spaces
set softtabstop=2
set shiftwidth=2                  " tab size eql 2 spaces
set expandtab                  " replace tabs with ${tabstop} spaces

set noshowmode                 " Don't show mode on bottom

set backspace=indent,eol,start

set autoindent
set cindent
set indentkeys-=0#            " do not break indent on #
set cinkeys-=0#
set cinkeys+=0=break
set cinoptions=:s,cs
set cinoptions+=b1,g0,N-s,t0,(0,W4
set cinwords=if,else,while,do
set cinwords+=for,switch,case
" "}}}

" Visual "{{{

set t_Co=256 " set 256 colors on vim

if &term =~ '256color'
  set t_ut=
endif

colorscheme kogyblack

"hi Normal ctermbg=none        " Enables transparency on terminal

"syntax on                     " enable syntax

set mouse=a                   " enable mouse in GUI mode
set mousehide                 " Hide mouse after chars typed

set number

"set undofile                  " stores undo state even when files are closed (in
                              " undodir)

set cursorline                " Current line adornment
"hi CursorLine cterm=none ctermbg=232

set lazyredraw                " Don't redraw while executing macros

set magic

set showmatch                 " Show matching brackets.

"set wildmode=longest,list     " At command line, complete longest common string,
                              " then list alternatives.
set wildmenu                  " Completition with menu

set novisualbell              " No blinking
set noerrorbells              " No noise.
set vb t_vb=                  " disable any beeps or flashes on error

set laststatus=2              " always show status line.
                              " Required for Airline
"set shortmess=atI             " shortens messages
set shortmess=atIo
set showcmd                   " display an incomplete command in statusline

set foldenable                " Turn on folding
set foldmethod=marker         " Fold on the marker
set foldlevel=100             " Don't autofold anything (but I can still fold
                              " manually)

set foldopen=block,hor,tag    " what movements open folds
set foldopen+=percent,mark
set foldopen+=quickfix

set virtualedit=block

set splitbelow
set splitright

set list listchars=tab:»\ ,trail:·,precedes:<,extends:>

" "}}}

" Key mappings " {{{

" Swap ; and :, since : is used way more than ;
nnoremap ; :
vnoremap ; :
"nnoremap : ;
"vnoremap : ;

" Swap ` and '
nnoremap ' `
vnoremap ' `
nnoremap ` '
vnoremap ` '

nnoremap <leader>rs :source $MYVIMRC<CR>
nnoremap <leader>re :edit $MYVIMRC<CR>

" Tabs
"nnoremap <localleader>h :tabprev<CR>
"nnoremap <localleader>l :tabnext<CR>

" Buffers
"nnoremap <localleader>- :bd<CR>
"nnoremap <localleader>-- :bd!<CR>

" Split line(opposite to S-J joining line)
nnoremap <S-k> i<CR><ESC>

" Create line below
"nnoremap <s-cr> A<CR><ESC>

" <Leader>{P,p} to paste copied outside vim
nnoremap <silent> <Leader>P "+P
nnoremap <silent> <Leader>p "+p
vnoremap <silent> <Leader>p "+p
"inoremap <silent> <Leader>p <ESC>"+pa

" <Leader>{Y,y} to copy outside vim
nnoremap <silent> <Leader>y "+y
vnoremap <silent> <Leader>y "+y
" recursive map, 'cause Y have a mapping
nnoremap <silent> <Leader>Y "+Y

" Make Control-direction switch between windows (like C-W h, etc)
nnoremap <leader>h <c-w>h
nnoremap <leader>j <c-w>j
nnoremap <leader>k <c-w>k
nnoremap <leader>l <c-w>l

" Splitting window
nnoremap <leader>v :vsp<CR>
nnoremap <leader>vv :split<CR>

" Remap search to center match
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" Erase highlights
nnoremap <silent> <leader>n :noh<CR>

" Now we don't have to move our fingers so far when we want to scroll through
" the command history; also, don't forget the q: command (see :h q: for more
" info)
cnoremap <c-j> <down>
cnoremap <c-k> <up>

" Switches to the previous buffer that was shown in the current window, but also
" closes the current buffer before switching to the previous one
noremap <leader>bq <c-^> :bd #<cr>

" For fast scrolling
noremap <c-j> 15gj
noremap <c-k> 15gk

" Switch to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>

" Toggle and untoggle spell checking
noremap <leader>ss :setlocal spell! spelllang=pt,en_us<cr>

" spelling shortcuts using <leader>
" ]s next misspelled word
" [s previous misspelled word
" zg add to dict
" z= get suggestions
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>su z=

" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv

" Move to the beginning and end of the line
nnoremap L $
nnoremap H ^

" Maps 'Y' to yank to the end of the line
nnoremap Y y$

" Adds quick quit
nnoremap <leader>q :q<cr>

" Adds quick quit insert mode
nnoremap ,. <esc>
inoremap ,. <esc>
vnoremap ,. <esc>

" " }}}

" AutoCommands " {{{
augroup vimrc_autocmds
  au BufRead,BufNewFile {*.md,*.mkd,*.markdown} setl ft=markdown
  "au! BufReadPost       {COMMIT_EDITMSG,*/COMMIT_EDITMSG} setl ft=gitcommit noml list| norm 1G
  au BufRead,BufNewFile {*.py,*.pyw} setl ft=python tabstop=4 softtabstop=4 shiftwidth=4 expandtab smarttab
  au BufRead,BufNewFile {*.coffee} setl ft=coffee tabstop=2 softtabstop=2 shiftwidth=2 noexpandtab list listchars=tab:\ \ ,trail:·,precedes:<,extends:>

  " open help in vertical split
  au BufWinEnter *.txt if &ft == 'help' | wincmd H | nmap q :q<CR> | endif

  " Update Airline
  autocmd! BufWritePost .vimrc,_vimrc,vimrc
          \ source $MYVIMRC | AirlineRefresh

  " Highlight lines with more than 80 length
  autocmd BufEnter,BufWritePost * highlight OverLength ctermbg=236
  autocmd BufEnter,BufWritePost * match OverLength /\%81v./

  "
  autocmd BufEnter * set formatoptions=cqonj
augroup END

" " }}}

" Scripts and Plugins Mappings " {{{

""""""""""""
" Dispatch "
""""""""""""
fun! SetMkfile()
  let filemk = "Makefile"
  let pathmk = "./"
  let depth = 1
  while depth < 4
    if filereadable(pathmk . filemk)
      return pathmk
    endif
    let depth += 1
    let pathmk = "../" . pathmk
  endwhile
  return "."
endf

command! -nargs=* MakeParent let &makeprg = 'make ' . <q-args> . ' -C ' . SetMkfile() . ' --no-print-directory' | Make
map <F9> :MakeParent rebuild<cr>

"""""""""""
" FSwitch "
"""""""""""

" nnoremap <leader>s  :FSHere<CR>
nnoremap <leader>sj :FSHere<CR>
nnoremap <leader>sl :FSSplitRight<CR>
nnoremap <leader>sh :FSSplitLeft<CR>

"""""""""""""""""
" YouCompleteMe "
"""""""""""""""""
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tag_files = 1
let g:ycm_seed_identifiers_with_syntax = 1

"let g:ycm_confirm_extra_conf = 0
"let g:ycm_autoclose_preview_window_after_completion = 1

let g:ycm_register_as_syntastic_checker = 0

"let g:ycm_enable_diagnostic_signs = 1
"let g:ycm_enable_diagnostic_highlighting = 0
"let g:ycm_always_populate_location_list = 1 "default 0
"let g:ycm_open_loclist_on_ycm_diags = 1 "default 1

"let g:ycm_server_use_vim_stdout = 1
"let g:ycm_server_log_level = 'debug'

"""""""""""""
" Syntastic "
"""""""""""""
let syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"set error and warning signs
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

"let g:syntastic_auto_loc_list = 1
let g:syntastic_always_populate_loc_list = 1

"let g:syntastic_cpp_checkers = ['gcc']

let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -Wall -Wextra -Wpedantic'

hi SpellBad ctermbg=red
hi SpellCap ctermbg=black

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--ignore=E501'

map <silent> <leader>e :Errors<CR>
map <silent> <leader>c :lclose<CR>

"""""""""""""""
" Indent line "
"""""""""""""""
let g:indentLine_color_term = 0

"""""""""
" Gundo "
"""""""""
"nnoremap <silent> <F5> :GundoToggle<CR>
"let g:gundo_close_on_revert=1

""""""""""""""
" Easy Align "
""""""""""""""
vmap <Enter>          <Plug>(EasyAlign)
vmap <Leader><Enter>  <Plug>(LiveEasyAlign)

"""""""""""""""
" Easy Motion "
"""""""""""""""
let g:EasyMotion_leader_key='<LocalLeader>'
nmap <LocalLeader>h <Plug>(easymotion-linebackward)
nmap <LocalLeader>j <Plug>(easymotion-j)
nmap <LocalLeader>k <Plug>(easymotion-k)
nmap <LocalLeader>l <Plug>(easymotion-lineforward)

"""""""""""
" Airline "
"""""""""""
"let g:airline_powerline_fonts = 1


"""""""""""
" Session "
"""""""""""
" you also need to run :SaveSession once to create the default.vim session that
" will then be autoloaded/saved from then on

"let g:session_default_to_last = 'yes'
"let g:session_autoload        = 'yes'
"let g:session_autosave        = 'yes'
"let g:session_directory       = '~/.vim/sessions'

"""""""""""""
" UltiSnips "
"""""""""""""
"" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger       = "<leader>s"
""let g:UltiSnipsExpandTrigger       = "<tab>"
""let g:UltiSnipsListSnippets        = "<c-tab>"
""let g:UltiSnipsJumpForwardTrigger  = "<tab>"
""let g:UltiSnipsExpandTrigger       = "<leader>s"
let g:UltiSnipsExpandTrigger       = "<leader>\\"
""let g:UltiSnipsListSnippets        = "<>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsSnippetsDir = $HOME . "/git/dotfiles/vim/UltiSnips"

" " }}}
