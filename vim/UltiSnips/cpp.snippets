snippet main "main"
int main(int argc, const char* argv[])
{
	${0}

	return 0;
}
endsnippet

snippet ndef "include guard"
#ifndef $1
#define ${1:SYMBOL}

#endif
endsnippet

snippet mainn "main()"
int main()
{
	${0}

	return 0;
}
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet mfun "member func"
${1:void} ${2:`!p snip.rv = snip.basename`}::${3:Func}($4) {
	$0
}
endsnippet

snippet hfun "header func"
${1:void} ${3:Func}($4);
endsnippet

snippet ns "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
$0
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet uns "unnamed namespace" !
namespace
{
$0
}  // unnamed namespace
endsnippet

snippet fori "for int loop (fori)"
for ( ${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2} )
{
	${0:/* code */}
}
endsnippet

snippet str "std::string"
std::string $0
endsnippet

snippet strr "std::string"
const std::string& $0
endsnippet

snippet vec "std::vector"
std::vector< ${1:std::string} > $2
endsnippet

snippet vecr "std::vector"
const std::vector< ${1:std::string} >& $2
endsnippet

snippet sd "std::"
std::
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${3}
endsnippet

# Casts
snippet scast "Static Cast"
static_cast<${1}>(${2}) ${3}
endsnippet

snippet rcast "Reinterpret Cast"
reinterpret_cast<${1}>(${2}) ${3}
endsnippet

snippet dcast "Dynamic Cast"
dynamic_cast<${1}>(${2}) ${3}
endsnippet

snippet ccast "Const Cast"
const_cast<${1}>(${2}) ${3}
endsnippet
